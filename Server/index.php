<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Глобальный массив SERVER</title>
</head>
<body>
<?
    function br (){
        echo '<br>';
    }

    function pre ($data) {
        echo '<pre>' . print_r($data, 1) . '</pre>';
    }
?>
    <h3>Выведение времени</h3>
    <p>
        Эта функция позволяет вывести определённую дату указанную в шаблоне. Дата может быть текущей или нет. Давайте же её выведем! <br>
        <?php 
            $date = date('Год: Y Дата: d.m Время: G:i:s');      //Присваевыем нашей переменной значения функции.
            $full_date = date('r');     //Все значения функций и параметры взяты из таблички с офиц. сайта PHP
            echo $date . '<br>';
            echo $full_date . '<br>';
        ?>
        <br>
        Но это была просто функция. В php также предусмотрено использование классов для такой задачи <br>
        
        <?php
        $date_now = new DateTime();     //Выделяем память для нового класса DateTime. Теперь наша переменная стала объектом
        $date_now->modify('+1 hour +3 day +10 week');       //Добавляет время, сколько надо
        echo $date_now->format('Время - H:i:s, l, M');
        ?>
    </p>

    <h2>Функции для массивов</h2>

    <p>
        А теперь разберём функции для массивов
    </p>

    <h3>count</h3>

    <p>
        Эта функция считает количество элементов массива и собственно его и возвращает.

        <?php
            $arr = [14, 88, 23, 25.6, 78, 1];
            echo count($arr);
            br();
        ?>
    </p>

    <h3>print_r</h3>

    <p>
        Функция для разрабочиков, чтобы удобно было выводить массивы. Давайте ещё раз посмотрим, как это всё работает с прелылущим массивом!

        <?
        $arr = [14, 88, 23, 25.6, 78, 1];
        pre($arr);
        ?>
    </p>

    <h3>Сортировка</h3>

    <p>
       <b>sort()</b> сортирует массив по возрастанию значений в массиве. Но к сожалению она ничего не возвращает, поэтому просто так её вывести нельзя. Если хотите вывести отсортированны массив, то сначала отсортируйте его функцией и уже потом, следующей строчкой выводите. Всё и сразу тут не выйдет!

        <?
        sort($arr);
        pre($arr);
        ?>

        Есть ещё функция которая сортирует по убыванию, <b>rsort()</b>. От слова reverse sort

        <?
        rsort($arr);
        pre($arr);
        ?>

        Также есть функции сортировки специально для ассоциативных массивов. Создадим и отсортируем один такой: <br>

        Первая функция у нас будет <b>asort()</b>. Она сортирует ассоциативный массив по возрастанию его значений (не клчей). Кароч как обычный sort только для ассоциативного массива. Наверно поэтому и называется <b>asort()</b>


        <?
        $arr_1 = ["a" => 99, "b" => 11, "c" => 50];
        asort($arr_1);
        pre($arr_1);
        ?>

        Также не забудем про <b>arsort()</b>, который является аналогом rsort для ассоциативных массивов

        <?
        arsort($arr_1);
        pre($arr_1);
        ?>

        А ещё, что немало важно, можно сортировать массивы по ключам! Для этого мы будем использовать <b>ksort()</b>

        <?
        ksort($arr_1);
        pre($arr_1);
        ?>

        Ну и конечно можно делать ревёрсную сортировку по ключам с помощью <b>krsort()</b>
        <?
        krsort($arr_1);
        pre($arr_1);
        ?>

    </p>

    <h3>Перетасовка</h3>

    <p>
        Чтобы перемешать рандомно значения элементов можно использовать специальную для этого функцию <b>shuffle()</b>. Эта функция перемешивает значения между ключами и удаляет старое расположение ключей, аккуратнее с ней

        <?
            $arr = [21, 22, 23, 24, 25];
            shuffle($arr);
            pre($arr);
        ?>
    </p>

    <h3>Проверка на оригинальность</h3>

    <p>
        Мы можем проверить, существует ли определённое значение в массиве. Следующая функция <b>in_array()</b> выдаёт true если такое значение уже есть или false, если такого значения нет

        <?
        $arr = [1, 2, 3, 4, 5];
        pre($arr);

        for ($i = 0; $i < 10; $i++) {
            if (in_array($i, $arr)) {
                echo "$i:" . 'Да, есть <br>';
            } else{
                echo "$i:" . 'Не такого <br>';
            }
        }
        ?>
    </p>

    <h3>Удаление значений</h3>

    <p>
        Можем удалять определённые значения из массивов. Для этого используется функция <b>unset()</b>. Удаление идёт по ключам. То есть мы в функцию передаём КЛЮЧ, в котором находится значение, которое мы хотим удалить. Значение передавать не надо
    </p>

    <?
    $pesn = [
             'a' => 'Из песни',
             'b' => 'слов',
             'c' => 'не',
             'd' => 'выкинешь'
            ];

    pre($pesn);
    echo 'Выкидываем слово из песни: <br>';
    unset($pesn['d']);

    pre($pesn);
    ?>

    <h3>Смешивание массивов</h3>

    <p>
        Имея два массива мы благополучно можем их смешать воедино. Элементы второго массива присоединяться к концу первого, как состав вагончиков. Функция <b>array_merge()</b>
    </p>

    <?
    $arr1 = [2, 5, 6, 7];
    $arr2 = [9, 10, 11, 12];
    echo 'Массив 1';
    pre($arr1);
    echo 'Массив 2';
    pre($arr2);

    echo 'Объединение!';
    $arr_merge = array_merge($arr1, $arr2);
    pre($arr_merge);
    ?>

    <h3>Обрезание элементов </h3>

    <p>
        Мы также можем обрезать массивы. Также как мы добавляли какой-то массив к другому (вспоминаем анологию с поездами и составами) мы можем и обрезать. Как будто отпилим несколько вагонов разом. Функция <b>array_slice()</b>

        <?
        echo 'Наш массив: <br>';
        $arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
        pre($arr);
        echo 'Обрезаем массив: <br>';
        $arr_slice = array_slice($arr, -3, 5);
        pre($arr_slice);
        ?>
        Первый параметр в array_slice() это массив, который собираемся обрезать. Второй параметр, так называемый offset это точка отсчёта, откуда будем отсчитывать. И третий параметр это длина обрезанного массива. Грубо говоря мы задаём параметр так, как будто собираемся отрезать булку. Мы знаем, какой длинны нам нужен кусок и знаем откуда начнём резать. Задавая отрицательное значение у offset мы начинаем отсчёт с конца по направлению к началу.
    </p>

    <h2>Функции для переменных</h2>

    <?
    $x = 12;
    echo 'x = ' . $x . '<br>';
    echo 'Цифра ли?' . is_numeric($x) . '<br>';
    echo 'Целое ли число?' . is_integer($x) . '<br>';
    echo 'Дробное ли число?' . is_double($x) . '<br>';
    echo 'Строка ли это?' . is_string($x) . '<br>';
    echo 'Является ли булевой переменной?' . is_bool($x) . '<br>';
    echo 'Является ли массивом?' . is_array($x) . '<br>';
    echo 'Какой тип у этой переменной?' . gettype($x) . '<br>';
    ?>

    <h2>Функции для работы со строками</h2>

    <?
    $str = "Пример обычной строки";
    echo "<b> $str </b> <br>";
    echo 'Сколько символов?' . strlen($str) . '<br>';
    echo 'Есть ли там вот такая фраза? ';
    echo strpos($str, "При") === false ? '\'При\' ненайдено' : '\'При\' найдено';
    br();
    echo 'А такая фраза есть? ';
    echo strpos($str, "ВРА") === false ? '\'ВРА\' ненайдено' : '\'ВРА\' найдено';
    br();
    br();
    echo 'А давайте срежем пару символа: ' . substr($str, 4) . '<br>'; //В кириллице один символ равен двум в коде. Поэтому так мало отрезалось
    echo 'А теперь давайте оставим от слова по хуйне: ' . substr($str, 10, -17) . '<br>';
    echo 'Сделаем строку в нижнем регистре: ' . mb_strtolower($str) . '<br>';   //Для латиницы убери mb
    echo 'Сделаем строку в верхнем регистре: ' . mb_strtoupper($str) . '<br>';  //Для латиницы убери mb
    echo trim("                  Просто                 текст               с           пробелами               ) <br>");
    echo "                  Просто                 текст               с           пробелами               ) <br>";  //Хз зачем
    ?>

    <h3>Математические функции</h3>

    <?
    $some = -15;
    echo "Наше число: $some <br>";
    echo "Модуль нашего числа: " . abs($some) . '<br>';
    br();
    $num = 23.84;
    echo "Наше новое число: $num <br>";
    echo "Округлим его по законам математики: " . round($num) . '<br>';
    echo "Округлим его в большую сторону: " . ceil($num) . '<br>';
    echo "Округлим его в меньшую сторону: " . floor($num) . '<br>';
    br();
    echo 'Рандомное число от 1 до 20: ' . mt_rand(1, 20) . '<br>';
    br();
    echo 'Найдём минимальное число из массива: ' . min(12, 36, 85, -7, 6, 96, 5) . '<br>';
    echo 'Найдём минимальное число из массива: ' . max(12, 36, 85, -7, 6, 96, 5) . '<br>';
    br();
    $z = 1;
    echo 'Переменная z = ' . $z . '<br>';
    echo 'Найдём синус нашей переменной' . sin($z) . '<br>';
    echo 'Найдём косинус нашей переменной' . cos($z) . '<br>';
    echo 'Найдём тангенс нашей переменной' . tan($z) . '<br>';
    echo 'Найдём котангенс нашей переменной' . 1 / tan($z) . '<br>';
    ?>

<h2>Инфа о пхп</h2>
<?
phpinfo();
?>
</body>
</html>