<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>ООП</title>
</head>
<body>
    <h2>Классы</h2>
    <?
    class User {
        $name = "Default"; //Поле со значением
        $surname;   //Поле без значения
        $email;     //Поле
        $login;     //Поле
        $pass;      //Поле

        function fun (){};    //Метод
    }
    ?>

    <p>
        Переменные в классах это <b>Поля</b>, а функции в классах это <b>Методы</b>
    </p>

    <h3>Модификаторы доступа</h3>

    <p>
        Существует три типа модификаторо доступа: <u>public</u>, <u>protected</u> и <u>private</u>. Они определяют, сможем ли мы достучаться до определённой переменной в классе или до определённого метода

        <?
        class User {
        public $name = "Default";   //Публичная переменная (поле) Указали значение по умолчанию
        protected $surname;         //Защищённая переменная (поле)
        private $email;             //Приватная переменная (поле)
        private $login;
        private $pass;

           protected function fun (){};    //Защищённые функция (метод)
        }
        ?>

        Публичную (public) переменную/функцию (поле/метод) видно в пределах класса И за его пределами, в других классах и вообще везде. <br>
        Защищённую (protected) переменную/функцию (поле/метод) видно в данном классе, а также в классах-наследниках (Позже поймём)
        <br>
        Приватную (private) переменную/функцию (поле/метод) видно ТОЛЬКО в пределах нашего класса
    </p>

    <h3>Создание объекта</h3>

    <?
    class User {
        public $name = "Default";   //Публичная переменная (поле)
        protected $surname;         //Защищённая переменная (поле)
        private $email;             //Приватная переменная (поле)
        private $login;
        private $pass;
    }

    $admin = new User();    //Теперь переменная админ стала объектом
    $admin->$name = "John"; //Даём полю name в классе user объекта admin значение "John"
    echo $admin->$name;     //Выводим значение поля name у объекта admin
    ?>

    <h3>Четыре кита ООП</h3>
    
    <ul>
        <li>Классы и объекты</li>
        <li>Наследование</li>
        <li>Инкапсулирование</li>
        <li>Полиморфизм</li>
    </ul>

    <p>
        С классами и объектами мы уже ознакомились
    </p>

    <h4>Наследование</h4>

    <p>
        Возможность создать дочерний класс, который будет наследовать все поля и методы своего родителя. Но в этот класс ещё можно что-нибудь дописать. Например у нас есть класс "Кошки", в котором все основные хар-ки любой Кошки: 4 лапы, хвост, клыки. И далее мы можем создать дочерний класс "Кошки-сфинксы", который будет наследовать все хар-ки из основного класса "Кошки", но помимо этого мы ещё можем записать сюда поле "protected $Нету_шерсти"
    </p>

    <h4>Полиморфизм</h4>

    <p>
        Возможность переопределять методы родительского класса в дочернем. Например у нас есть всё те же два класса "Кошки" и "Кошки-сфинксы". Первый всё также родитель второго. И некоторые функции (методы) в родительском классе мы можем видоизменять в классе-наследнике "Кошки-сфинксы". Например класс "Кошки" мурлычит перед сном (такой метод), а класс "Кошки-сфинксы" мурлычит, когда гладишь.
    </p>

    <h4>Инкапсуляция</h4>

    <p>
        Возможность открытия или закрытия различных полей/методов в классе. Мы это делали с помощью модификаторов доступа public protected private.
    </p>
</body>
</html>